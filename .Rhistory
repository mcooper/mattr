spread(Var, Pop) %>%
rename(iso3c=iso_code)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(urb_rur, gdp, pop, edu, gini))
comb$GDP_PerCap <- comb$GDP_PPP_2005USD_Bill/comb$Population
head(comb)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(gdp, pop, edu, gini))
write.csv(urb_rur, file.path(gdl_dir, 'GDL_Urban_Rural.csv'), row.names=F)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(gdp, pop, edu, gini))
comb$GDP_PerCap <- comb$GDP_PPP_2005USD_Bill/comb$Population
write.csv(comb, file.path(gdl_dir, 'SSP3_Vars.csv'), row.names=F)
dat <- read.csv('G://My Drive/WHC Data/SSP3_Vars.csv')
head(Dat)
head(dat)
dat <- read.csv('G://My Drive/WHC Data/GDL_Urban_Rural.csv')
head(dat)
dat %>% filter(Year==2020) %>%
mutate(urb_perc = urb_pop/(rur_pop + urb_pop))
library(tidyverse)
dat %>% filter(Year==2020) %>%
mutate(urb_perc = urb_pop/(rur_pop + urb_pop))
dat %>% filter(Year==2020) %>%
mutate(urb_perc = urb_pop/(rur_pop + urb_pop)) %>%
hist(.$urb_perc)
d <- dat %>% filter(Year==2020) %>%
mutate(urb_perc = urb_pop/(rur_pop + urb_pop))
hist(d$urb_perc)
library(raster)
?resample
?rasterize
library(tidyverse)
library(raster)
library(rgdal)
pop1990 <- raster('G://My Drive/DHS Spatial Covars/Population/gpw_v1_population_count_rev10_1990_2pt5_min.tif')
pop2000 <- raster('G://My Drive/DHS Spatial Covars/Population/gpw_v4_population_count_rev10_2000_2pt5_min.tif')
pop1995 <- exp((log(pop1990) + log(pop2000))/2)
r <- raster('G://My Drive/WHC Data/gl_grumpv1_urextent_ascii_30/glurextents.asc')
r
?aggreagte
?aggregate
pop1995
0.04166667/0.00833333
resamp <- aggregate(r, fact=5)
resampe
resamp <- aggregate(r, fact=5, fun=mean)
r
hist(r)
r
resamp <- aggregate(r==1, fact=5, fun=mean)
beepr::beep(sound='mario')
resamp
library(raster)
library(tidyverse)
df <- data.frame(a=1:10, b=11:20)
df %>%
select(a)
pop1990 <- raster('G://My Drive/DHS Spatial Covars/Population/gpw_v1_population_count_rev10_1990_2pt5_min.tif')
pop2000 <- raster('G://My Drive/DHS Spatial Covars/Population/gpw_v4_population_count_rev10_2000_2pt5_min.tif')
urb1995 <- raster('G://My Drive/WHC Data/UrbanPerc1995.tif')
pop1995 <- exp((log(pop1990) + log(pop2000))/2)
urbpop1995 <- urb1995*pop1995
plot(urbpop1995)
rurpop1995 <- pop1995 - urbpop1995
plot(rurpop1995)
b <- brick(urbpop1995, rurpop1995)
dat <- readOGR(dsn='G://My Drive/WHC Data/extract rasters', layer='GDL Shapefiles V4')
library(rgdal)
dat <- readOGR(dsn='G://My Drive/WHC Data/extract rasters', layer='GDL Shapefiles V4')
e <- extract(b, dat, fun=sum, na.rm=T)
e <- raster::extract(b, dat, fun=sum, na.rm=T)
dat <- cbind(dat, e)
beepr::beep(sound=='mario')
head(dat)
b
urbpop1995
dat <- dat %>%
select(GDLcode, iso3c=iso_code, rur1995=layer.2, urb1995=layer.2)
dat2 <- dat@data %>%
select(GDLcode, iso3c=iso_code, rur1995=layer.2, urb1995=layer.2)
dim(dat2)
tail(dat2)
head(dat@data)
dat2 <- dat@data %>%
select(GDLcode, iso3c=iso_code, rur1995=layer.2, urb1995=layer.1)
head(dat@data)
head(dat2)
tail(dat2)
plot(urbpop1995)
plot(rurpop1995)
plot(pop1995)
plot(pop1990)
plot(pop2000)
pop1990 <- raster(file.path(pop_dir, 'gpw_v1_population_count_rev10_1990_2pt5_min.tif'))
pop2000 <- raster(file.path(pop_dir, 'gpw_v4_population_count_rev10_2000_2pt5_min.tif'))
if(Sys.info()['sysname'] == 'Windows'){
gdl_dir <- 'G://My Drive/WHC Data'
dat_dir <- 'G://My Drive/WHC Data/extract rasters'
pop_dir <- 'G://My Drive/DHS Spatial Covars/Population/'
} else{
gdl_dir <- '~'
dat_dir <- '~/mortalityblob/whc'
pop_dir <- '~'
}
pop1990 <- raster(file.path(pop_dir, 'gpw_v1_population_count_rev10_1990_2pt5_min.tif'))
pop2000 <- raster(file.path(pop_dir, 'gpw_v4_population_count_rev10_2000_2pt5_min.tif'))
plot(pop1990)
pop1995 <- raster(file.path(gdl_dir, "gl_gpwv3_pcount_95_ascii_25\glp95ag.asc"))
urb1995 <- raster(file.path(gdl_dir, '/UrbanPerc1995.tif'))
pop1995 <- raster(file.path(gdl_dir, "gl_gpwv3_pcount_95_ascii_25/glp95ag.asc"))
pop1995 <- raster(file.path(pop_dir, "gl_gpwv3_pcount_95_ascii_25/glp95ag.asc"))
pop1995
plot(pop1995)
urb1995 <- raster(file.path(gdl_dir, '/UrbanPerc1995.tif'))
urbpop1995 <- urb1995*pop1995
rurpop1995 <- pop1995 - urbpop1995
b <- brick(urbpop1995, rurpop1995)
dat <- readOGR(dsn=dat_dir, layer='GDL Shapefiles V4')
e <- raster::extract(b, dat, fun=sum, na.rm=T)
beepr::beep(sound='mario')
library(raster)
library(rgdal)
library(tidyverse)
if(Sys.info()['sysname'] == 'Windows'){
gdl_dir <- 'G://My Drive/WHC Data'
dat_dir <- 'G://My Drive/WHC Data/extract rasters'
pop_dir <- 'G://My Drive/DHS Spatial Covars/Population/'
} else{
gdl_dir <- '~'
dat_dir <- '~/mortalityblob/whc'
pop_dir <- '~'
}
pop1995 <- raster(file.path(pop_dir, "gl_gpwv3_pcount_95_ascii_25/glp95ag.asc"))
urb1995 <- raster(file.path(gdl_dir, '/UrbanPerc1995.tif'))
urbpop1995 <- urb1995*pop1995
rurpop1995 <- pop1995 - urbpop1995
urbpop1995
b
start <- Sys.time()
e <- raster::extract(b, dat, fun=sum, na.rm=T)
end <- Sys.time()
beepr::beep(sound='mario')
start - end
head(e)
tail(e)
dat[ , c('urban1995', 'rural1995')] <- e
dat <- cbind(dat, e)
head(dat)
dat2 <- dat@data %>%
select(GDLcode, iso3c=iso_code, urban1995=layer.1, rural1995=layer.2)
head(dat2)
tail(dat2)
write.csv(dat, file.path(gdl_dir, 'UrbanRural1995.csv'), row.names=F)
`+` <- function(a, b){ifelse(is.numeric(a),sum(a, b), paste0(a, b))}
1 + 2
'this' + 'that'
`+` <- function(...){paste0(...)}
1 + 2
`+` <- function(a, b){ifelse(is.numeric(a),sum(a, b), paste0(a, b))}
1 + 2
'1' + 2
1 + '2'
1 + 1
i <- 3.2342342626
j <- 4.1263456347
plusstart <- Sys.time()
for (i in 1:100000){
i + j
}
plusend <- Sys.time()
plusend - plusstart
plusstart <- Sys.time()
for (i in 1:100000000){
i + j
}
plusend <- Sys.time()
plusend - plusstart
sumstart <- Sys.time()
for (i in 1:100000000){
sum(i, j)
}
sumsend <- Sys.time()
sumend - plusstart
sumsend - sumstart
i <- 3.2342342626
j <- 4.1263456347
plusstart <- Sys.time()
for (i in 1:10000000){
i + j
}
plusend <- Sys.time()
plusend - plusstart
`+` <- function(a, b){ifelse(is.numeric(a),sum(a, b), paste0(a, b))}
newstart <- Sys.time()
for (i in 1:100000000){
i + j
}
newend <- Sys.time()
ewend - newstart
sum <- function(x){-sum(x)}
sum(c(1, 2))
sum <- function(...){-sum(...)}
sum(c(1, 2))
sum(1, 2)
`+` <- function(a, b){ifelse(is.numeric(a),a+b, paste0(a, b))}
1 + 2
library(tidyverse)
library(sf)
library(countrycode)
library(readxl)
library(raster)
library(sp)
library(rgdal)
options(stringsAsFactors=F)
if(Sys.info()['sysname'] == 'Windows'){
gdl_dir <- 'G://My Drive/WHC Data'
ssp_dir <- 'G://My Drive/Data/SSPs'
}
cov <- read.csv(file.path(gdl_dir, 'GDL_extract.csv'))
dat <- readOGR(dsn=file.path(gdl_dir, 'extract rasters'), layer='GDL Shapefiles V4')
library(tidyverse)
library(sf)
library(countrycode)
library(readxl)
library(raster)
library(sp)
library(rgdal)
options(stringsAsFactors=F)
if(Sys.info()['sysname'] == 'Windows'){
gdl_dir <- 'G://My Drive/WHC Data'
ssp_dir <- 'G://My Drive/Data/SSPs'
}
cov <- read.csv(file.path(gdl_dir, 'GDL_extract.csv'))
dat <- readOGR(dsn=file.path(gdl_dir, 'extract rasters'), layer='GDL Shapefiles V4')
#GDP percap
sel <- cov %>%
filter(variable %in% c('grid_gdp')) %>%
mutate(GDLCode = gsub('/home/mattcoop/mortalityblob/whc/extract/', '', GDLCode)) %>%
spread(variable, value) %>%
rename(Year=year)
head(sel)
gini <- read.csv(file.path(ssp_dir, 'Gini/API_SI.POV.GINI_DS2_en_csv_v2_41010.csv'), skip = 4) %>%
dplyr::select(-Country.Name, -Indicator.Name, -Indicator.Code) %>%
gather(Year, Gini, -Country.Code) %>%
mutate(Year=as.numeric(substr(Year, 2, 5)),
iso3c=case_when(Country.Code=='SOM' ~ 'SOM',
TRUE ~ countrycode(Country.Code, 'wb', 'iso3c')))
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv'))
#######################
# Get Urban-Rural Pop
#######################
urpop <- read.csv(file.path(gdl_dir, 'UrbanRuralHistoric.csv'))
head(sel)
head(gini)
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv')) %>%
select(GDLcode=GDLCODE, Population.size.in.millions, Mean.years.schooling)
library(tidyverse)
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv')) %>%
select(GDLcode=GDLCODE, Population.size.in.millions, Mean.years.schooling)
library(tidyverse)
library(sf)
library(countrycode)
library(readxl)
options(stringsAsFactors=F)
if(Sys.info()['sysname'] == 'Windows'){
gdl_dir <- 'G://My Drive/WHC Data'
ssp_dir <- 'G://My Drive/Data/SSPs'
}
cov <- read.csv(file.path(gdl_dir, 'GDL_extract.csv'))
dat <- readOGR(dsn=file.path(gdl_dir, 'extract rasters'), layer='GDL Shapefiles V4')
#GDP percap
sel <- cov %>%
filter(variable %in% c('grid_gdp')) %>%
mutate(GDLCode = gsub('/home/mattcoop/mortalityblob/whc/extract/', '', GDLCode)) %>%
spread(variable, value) %>%
rename(Year=year)
gini <- read.csv(file.path(ssp_dir, 'Gini/API_SI.POV.GINI_DS2_en_csv_v2_41010.csv'), skip = 4) %>%
dplyr::select(-Country.Name, -Indicator.Name, -Indicator.Code) %>%
gather(Year, Gini, -Country.Code) %>%
mutate(Year=as.numeric(substr(Year, 2, 5)),
iso3c=case_when(Country.Code=='SOM' ~ 'SOM',
TRUE ~ countrycode(Country.Code, 'wb', 'iso3c')))
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv')) %>%
select(GDLcode=GDLCODE, Population.size.in.millions, Mean.years.schooling)
head(edpop)
#######################
# Get Urban-Rural Pop
#######################
urpop <- read.csv(file.path(gdl_dir, 'UrbanRuralHistoric.csv'))
head(urpop)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, gini, edpop, urpop))
head(sel)
#GDP percap
sel <- cov %>%
filter(variable %in% c('grid_gdp')) %>%
mutate(GDLCode = gsub('/home/mattcoop/mortalityblob/whc/extract/', '', GDLCode)) %>%
spread(variable, value) %>%
rename(Year=year, GDLcode=GDLCode)
head(gini)
gini <- read.csv(file.path(ssp_dir, 'Gini/API_SI.POV.GINI_DS2_en_csv_v2_41010.csv'), skip = 4) %>%
dplyr::select(-Country.Name, -Indicator.Name, -Indicator.Code) %>%
gather(Year, Gini, -Country.Code) %>%
mutate(Year=as.numeric(substr(Year, 2, 5)),
iso3c=case_when(Country.Code=='SOM' ~ 'SOM',
TRUE ~ countrycode(Country.Code, 'wb', 'iso3c'))) %>%
na.omit
head(gini)
head(sel)
gini <- read.csv(file.path(ssp_dir, 'Gini/API_SI.POV.GINI_DS2_en_csv_v2_41010.csv'), skip = 4) %>%
dplyr::select(-Country.Name, -Indicator.Name, -Indicator.Code) %>%
gather(Year, Gini, -Country.Code) %>%
mutate(Year=as.numeric(substr(Year, 2, 5)),
iso3c=case_when(Country.Code=='SOM' ~ 'SOM',
TRUE ~ countrycode(Country.Code, 'wb', 'iso3c'))) %>%
select(-Country.Code) %>%
na.omit
head(gini)
head(sel)
#GDP percap
gdp <- cov %>%
filter(variable %in% c('grid_gdp')) %>%
mutate(GDLCode = gsub('/home/mattcoop/mortalityblob/whc/extract/', '', GDLCode)) %>%
spread(variable, value) %>%
rename(Year=year, GDLcode=GDLCode)
head(gdp)
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv')) %>%
select(GDLcode=GDLCODE, Pop=Population.size.in.millions, EdYears=Mean.years.schooling)
head(edpop)
#######################
# Get Urban-Rural Pop
#######################
urpop <- read.csv(file.path(gdl_dir, 'UrbanRuralHistoric.csv'))
head(urpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-ed-pop.csv'))
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv'))
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv')) %>%
select(GDLcode=GDLCODE, iso3c=ISO_Code, matches('X\d{4}'))
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv')) %>%
select(GDLcode=GDLCODE, iso3c=ISO_Code, matches('X\\d{4}'))
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv')) %>%
select(GDLcode=GDLCODE, iso3c=ISO_Code, matches('X\\d{4}')) %>%
gather(Year, EdYears, -GDLcode, iso3c)
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv')) %>%
select(GDLcode=GDLCODE, iso3c=ISO_Code, matches('X\\d{4}')) %>%
gather(Year, EdYears, -GDLcode, -iso3c)
head(edpop)
edpop <- read.csv(file.path(gdl_dir, 'GDL-Mean-years-schooling-data.csv')) %>%
select(GDLcode=GDLCODE, iso3c=ISO_Code, matches('X\\d{4}')) %>%
gather(Year, EdYears, -GDLcode, -iso3c) %>%
mutate(Year = as.numeric(substr(Year, 2, 5)))
head(edpop)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, gini))#, edpop, urpop))
dim(sel)
dim(gini)
names(sel)
names(gini)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, edpop))#, gini))#, urpop))
dim(sel)
dim(edpop)
dim(comb)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, edpop, gini))
dim(comb)
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, edpop, gini, urpop))
dim(comb)
head(comb)
sapply(comb, function(x){sum(is.na(x))})
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, edpop, gini, urpop)) %>%
filter(Year > 1990)
sapply(comb, function(x){sum(is.na(x))})
sapply(comb %>% filter(is.na(iso3c)), function(x){sum(is.na(x))})
View(comb)
View(comb %>% is.na(GDLcode))
View(comb %>% filter(is.na(GDLcode)))
comb <- Reduce(function(x, y){merge(x, y, all.x=T, all.y=T)},
list(sel, edpop, gini, urpop)) %>%
filter(Year > 1990, !is.na(GDLcode))
View(comb)
View(comb %>% filter(is.na(EdYears)))
head(urpop)
sum(is.na(urpop$iso3c))
#######################
# Get Urban-Rural Pop
#######################
urpop <- read.csv(file.path(gdl_dir, 'UrbanRuralHistoric.csv')) %>%
select(-iso3c)
head(urpop)
head(edpop)
View(edpop)
write.csv(comb, 'SSP2_Vars_Historic.csv', row.names=F)
getwd()
dat <- read.csv('G://My Drive/WHC Data/GDL_extract.csv')
head(dat)
library(readxl)
library(countrycode)
dat <- read_xlsx("G:/My Drive/WHC Data/subnational/other data/who nutgrowthdb/WHO_Child_Growth_Malnutrition_Data_Export_Selected_Countries_Short.xlsx", sheet = 'Survey details')
countrycode(unique(dat$`Country ISO-3 Code`), 'iso3c', 'country.name')
?merge
merge
n
n <- c('test', 'this', 'now')
paste0("Do you want to merge on ", n)
paste("Do you want to merge on ", n)
paste0(n, collapse=', ')
paste0("Merge on cols: ", paste0(n, collapse=', '), '?')
res <- menu(c("Yes", "No"), title=paste0("Merge on cols: ", paste0(n, collapse=', '), '?'))
res
res <- menu(c("Yes", "No"), title=paste0("Merge on cols: ", paste0(n, collapse=', '), '?'))
res
smerge <- function(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, q=TRUE, ...){
n <- intersect(names(x), names(y))
if (q){
res <- menu(c("Yes", "No"), title=paste0("Merge on cols: ", paste0(n, collapse=', '), '?'))
}
if (res == 2){
return(NULL)
}
return(base::merge(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, ...))
}
df1 <- data.frame(l=letters, L=LETTERS, n=1:26, r=rnorm(26))
df1
df2 <- df1[c(1, 4, 3, 6, 3,5, 8, 5, 3), ]
df2
smerge <- function(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, q=TRUE, ...){
n <- intersect(names(x), names(y))
if (q){
res <- menu(c("Yes", "No"), title=paste0("Merge on cols: ", paste0(n, collapse=', '), '?'))
}
if (res == 2){
return(NULL)
}
return(base::merge(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, ...))
}
smerge(df1, df2)
smerge(df1, df2)
smerge(df1, df2, all=T)
smerge(df1, df2, all.x=T, all.y=F)
smerge(df1, df2, all.x=T, all.y=F, by='L')
intesect(c('a', 'b'), c('d', 'e'))
intersect(c('a', 'b'), c('d', 'e'))
smerge <- function(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, q=TRUE, ...){
n <- intersect(names(x), names(y))
if (q){
qstr <- ifelse(length(n)==0,
"Merge with no matching columns?",
paste0("Merge on cols: ", paste0(n, collapse=', '), '?'))
res <- menu(c("Yes", "No"), title=qstr)
}
if (res == 2){
return(NULL)
}
return(base::merge(x, y, by = intersect(names(x), names(y)),
by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,
sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,
incomparables = NULL, ...))
}
smerge(df1, df2)
smerge(df1, data.frame(g=c(1, 2)))
?merge
conflict_prefer(select, dplyr, losers = NULL, quiet = FALSE)
library(conflicted)
install.packages('conflicted')
conflict_prefer(select, dplyr, losers = NULL, quiet = FALSE)
library(conflicted)
conflict_prefer(select, dplyr, losers = NULL, quiet = FALSE)
conflict_prefer('select', 'dplyr', losers = NULL, quiet = FALSE)
getOption(scipen)
options(scipen)
?options
getOption('scipen')
getwd()
setwd('mattr')
library(roxygen2)
roxygen2::roxygenize()
library(devtools)
roxygen2::roxygenize()
?conflict_prefer
mtcars
filter(mtcars, am== 1)
filter(mtcars, mpg > 21)
names(mtcars)
filter(mtcars, am== 1)
dplyr::filter(mtcars, am== 1)
dplyr::filter(mtcars, am == 1)
library(dplyr)
filter(mtcars, am == 1)
